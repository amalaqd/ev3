Elm.Ev3Dashboard = Elm.Ev3Dashboard || {};
Elm.Ev3Dashboard.make = function (_elm) {
   "use strict";
   _elm.Ev3Dashboard = _elm.Ev3Dashboard || {};
   if (_elm.Ev3Dashboard.values) return _elm.Ev3Dashboard.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Ev3Status = Elm.Ev3Status.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var activeState = Elm.Native.Port.make(_elm).inboundSignal("activeState",
   "Ev3Status.ActiveState",
   function (v) {
      return typeof v === "object" && "active" in v ? {_: {}
                                                      ,active: typeof v.active === "boolean" ? v.active : _U.badPort("a boolean (true or false)",
                                                      v.active)} : _U.badPort("an object with fields `active`",v);
   });
   var runtimeStats = Elm.Native.Port.make(_elm).inboundSignal("runtimeStats",
   "Ev3Status.RuntimeStats",
   function (v) {
      return typeof v === "object" && "ramFree" in v && "ramUsed" in v && "swapFree" in v && "swapUsed" in v ? {_: {}
                                                                                                               ,ramFree: typeof v.ramFree === "number" && isFinite(v.ramFree) && Math.floor(v.ramFree) === v.ramFree ? v.ramFree : _U.badPort("an integer",
                                                                                                               v.ramFree)
                                                                                                               ,ramUsed: typeof v.ramUsed === "number" && isFinite(v.ramUsed) && Math.floor(v.ramUsed) === v.ramUsed ? v.ramUsed : _U.badPort("an integer",
                                                                                                               v.ramUsed)
                                                                                                               ,swapFree: typeof v.swapFree === "number" && isFinite(v.swapFree) && Math.floor(v.swapFree) === v.swapFree ? v.swapFree : _U.badPort("an integer",
                                                                                                               v.swapFree)
                                                                                                               ,swapUsed: typeof v.swapUsed === "number" && isFinite(v.swapUsed) && Math.floor(v.swapUsed) === v.swapUsed ? v.swapUsed : _U.badPort("an integer",
                                                                                                               v.swapUsed)} : _U.badPort("an object with fields `ramFree`, `ramUsed`, `swapFree`, `swapUsed`",
      v);
   });
   var statusInputs = _U.list([A2($Signal.map,$Ev3Status.Status,A2($Signal.map,$Ev3Status.SetRuntimeStats,runtimeStats))
                              ,A2($Signal.map,$Ev3Status.Status,A2($Signal.map,$Ev3Status.SetActive,activeState))]);
   var inputs = $List.concat(_U.list([statusInputs]));
   var update = F2(function (action,model) {
      var _p0 = action;
      var _p1 = A2($Ev3Status.update,_p0._0,model.status);
      var newStatus = _p1._0;
      var effects = _p1._1;
      return {ctor: "_Tuple2",_0: _U.update(model,{status: newStatus}),_1: effects};
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container-fluid"),A2($Html$Attributes.attribute,"role","main")]),
      _U.list([A2($Html.h1,_U.list([$Html$Attributes.$class("text-center")]),_U.list([$Html.text("Robot Dashboard")]))
              ,A2($Ev3Status.view,address,model.status)]));
   });
   var init = {ctor: "_Tuple2",_0: {status: $Ev3Status.initModel},_1: $Effects.batch(_U.list([$Ev3Status.initEffect]))};
   var app = $StartApp.start({init: init,update: update,view: view,inputs: inputs});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var Model = function (a) {    return {status: a};};
   return _elm.Ev3Dashboard.values = {_op: _op,Model: Model,app: app,main: main,init: init,view: view,update: update,inputs: inputs,statusInputs: statusInputs};
};