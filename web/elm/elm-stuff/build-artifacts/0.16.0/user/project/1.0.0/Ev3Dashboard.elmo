Elm.Ev3Dashboard = Elm.Ev3Dashboard || {};
Elm.Ev3Dashboard.make = function (_elm) {
   "use strict";
   _elm.Ev3Dashboard = _elm.Ev3Dashboard || {};
   if (_elm.Ev3Dashboard.values) return _elm.Ev3Dashboard.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String$Interpolate = Elm.String.Interpolate.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var behaviorPort = Elm.Native.Port.make(_elm).inboundSignal("behaviorPort",
   "Ev3Dashboard.BehaviorData",
   function (v) {
      return typeof v === "object" && "name" in v && "event" in v && "value" in v ? {_: {}
                                                                                    ,name: typeof v.name === "string" || typeof v.name === "object" && v.name instanceof String ? v.name : _U.badPort("a string",
                                                                                    v.name)
                                                                                    ,event: typeof v.event === "string" || typeof v.event === "object" && v.event instanceof String ? v.event : _U.badPort("a string",
                                                                                    v.event)
                                                                                    ,value: typeof v.value === "string" || typeof v.value === "object" && v.value instanceof String ? v.value : _U.badPort("a string",
                                                                                    v.value)} : _U.badPort("an object with fields `name`, `event`, `value`",v);
   });
   var motivePort = Elm.Native.Port.make(_elm).inboundSignal("motivePort",
   "Ev3Dashboard.Motive",
   function (v) {
      return typeof v === "object" && "about" in v && "on" in v && "inhibited" in v ? {_: {}
                                                                                      ,about: typeof v.about === "string" || typeof v.about === "object" && v.about instanceof String ? v.about : _U.badPort("a string",
                                                                                      v.about)
                                                                                      ,on: typeof v.on === "boolean" ? v.on : _U.badPort("a boolean (true or false)",
                                                                                      v.on)
                                                                                      ,inhibited: typeof v.inhibited === "boolean" ? v.inhibited : _U.badPort("a boolean (true or false)",
                                                                                      v.inhibited)} : _U.badPort("an object with fields `about`, `on`, `inhibited`",
      v);
   });
   var perceptPort = Elm.Native.Port.make(_elm).inboundSignal("perceptPort",
   "Ev3Dashboard.Percept",
   function (v) {
      return typeof v === "object" && "about" in v && "value" in v ? {_: {}
                                                                     ,about: typeof v.about === "string" || typeof v.about === "object" && v.about instanceof String ? v.about : _U.badPort("a string",
                                                                     v.about)
                                                                     ,value: typeof v.value === "string" || typeof v.value === "object" && v.value instanceof String ? v.value : _U.badPort("a string",
                                                                     v.value)} : _U.badPort("an object with fields `about`, `value`",v);
   });
   var activeStatePort = Elm.Native.Port.make(_elm).inboundSignal("activeStatePort",
   "Ev3Dashboard.ActiveState",
   function (v) {
      return typeof v === "object" && "active" in v ? {_: {}
                                                      ,active: typeof v.active === "boolean" ? v.active : _U.badPort("a boolean (true or false)",
                                                      v.active)} : _U.badPort("an object with fields `active`",v);
   });
   var runtimeStatsPort = Elm.Native.Port.make(_elm).inboundSignal("runtimeStatsPort",
   "Ev3Dashboard.RuntimeStats",
   function (v) {
      return typeof v === "object" && "ramFree" in v && "ramUsed" in v && "swapFree" in v && "swapUsed" in v ? {_: {}
                                                                                                               ,ramFree: typeof v.ramFree === "number" && isFinite(v.ramFree) && Math.floor(v.ramFree) === v.ramFree ? v.ramFree : _U.badPort("an integer",
                                                                                                               v.ramFree)
                                                                                                               ,ramUsed: typeof v.ramUsed === "number" && isFinite(v.ramUsed) && Math.floor(v.ramUsed) === v.ramUsed ? v.ramUsed : _U.badPort("an integer",
                                                                                                               v.ramUsed)
                                                                                                               ,swapFree: typeof v.swapFree === "number" && isFinite(v.swapFree) && Math.floor(v.swapFree) === v.swapFree ? v.swapFree : _U.badPort("an integer",
                                                                                                               v.swapFree)
                                                                                                               ,swapUsed: typeof v.swapUsed === "number" && isFinite(v.swapUsed) && Math.floor(v.swapUsed) === v.swapUsed ? v.swapUsed : _U.badPort("an integer",
                                                                                                               v.swapUsed)} : _U.badPort("an object with fields `ramFree`, `ramUsed`, `swapFree`, `swapUsed`",
      v);
   });
   var decodePaused = A2($Json$Decode._op[":="],"paused",$Json$Decode.bool);
   var motivationUpdate = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "SetMotive") {
            var _p1 = _p0._0;
            return {ctor: "_Tuple2",_0: _U.update(model,{motives: A3($Dict.insert,_p1.about,_p1,model.motives)}),_1: $Effects.none};
         } else {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         }
   });
   var perceptionUpdate = F2(function (action,model) {
      var _p2 = action;
      if (_p2.ctor === "AddPercept") {
            var _p3 = _p2._0;
            return {ctor: "_Tuple2",_0: _U.update(model,{percepts: A3($Dict.insert,_p3.about,_p3.value,model.percepts)}),_1: $Effects.none};
         } else {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         }
   });
   var perceptionView = F2(function (address,model) {
      var getValue = F2(function (about,percepts) {    return A2($Maybe.withDefault,"?",A2($Dict.get,about,percepts));});
      var viewPercept = F3(function (address,percepts,about) {
         return A2($Html.tr,
         _U.list([]),
         _U.list([A2($Html.td,
         _U.list([]),
         _U.list([A2($Html.strong,_U.list([]),_U.list([$Html.text(about)]))
                 ,A2($Html.span,_U.list([]),_U.list([$Html.text(" is "),$Html.text(A2(getValue,about,percepts))]))]))]));
      });
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Percepts")]))
              ,A2($Html.table,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "table",_1: true},{ctor: "_Tuple2",_0: "table-bordered",_1: true}]))]),
              _U.list([A2($Html.tbody,_U.list([]),A2($List.map,A2(viewPercept,address,model.percepts),$List.sort($Dict.keys(model.percepts))))]))]));
   });
   var comportmentInitEffect = $Effects.none;
   var motivationInitEffect = $Effects.none;
   var perceptionInitEffect = $Effects.none;
   var comportmentInitModel = {behaviors: $Dict.empty};
   var motivationInitModel = {motives: $Dict.empty};
   var perceptionInitModel = {percepts: $Dict.empty};
   var hostname = "localhost";
   var Model = F4(function (a,b,c,d) {    return {status: a,perception: b,motivation: c,comportment: d};});
   var Behavior = F5(function (a,b,c,d,e) {    return {name: a,started: b,inhibited: c,overwhelmed: d,state: e};});
   var comportmentView = F2(function (address,model) {
      var statusClass = function (behavior) {    return behavior.started ? behavior.overwhelmed ? "bg-warning" : "bg-success" : "bg-danger";};
      var inhibitedText = F2(function (bool,name) {    return bool ? A3($Html.node,"s",_U.list([]),_U.list([$Html.text(name)])) : $Html.text(name);});
      var getBehavior = F2(function (name,behaviors) {    return A2($Maybe.withDefault,A5(Behavior,"",false,false,false,""),A2($Dict.get,name,behaviors));});
      var viewBehavior = F3(function (address,behaviors,name) {
         var behavior = A2(getBehavior,name,behaviors);
         return A2($Html.tr,
         _U.list([]),
         _U.list([A2($Html.td,
         _U.list([]),
         _U.list([A2($Html.strong,_U.list([$Html$Attributes.$class(statusClass(behavior))]),_U.list([A2(inhibitedText,behavior.inhibited,name)]))
                 ,A2($Html.span,_U.list([]),_U.list([$Html.text(" is "),$Html.text(behavior.state)]))]))]));
      });
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Behaviors")]))
              ,A2($Html.table,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "table",_1: true},{ctor: "_Tuple2",_0: "table-bordered",_1: true}]))]),
              _U.list([A2($Html.tbody,_U.list([]),A2($List.map,A2(viewBehavior,address,model.behaviors),$List.sort($Dict.keys(model.behaviors))))]))]));
   });
   var comportmentUpdate = F2(function (action,model) {
      var insert = F2(function (dict,behavior) {    return A3($Dict.insert,behavior.name,behavior,dict);});
      var revive = function (behavior) {    return _U.update(behavior,{overwhelmed: false});};
      var revive_all = A3($Dict.foldl,F3(function (name,behavior,dict) {    return A2(insert,dict,revive(behavior));}),$Dict.empty,model.behaviors);
      var _p4 = action;
      switch (_p4.ctor)
      {case "SetActive": return _p4._0.active ? {ctor: "_Tuple2",_0: _U.update(model,{behaviors: revive_all}),_1: $Effects.none} : {ctor: "_Tuple2"
                                                                                                                                   ,_0: model
                                                                                                                                   ,_1: $Effects.none};
         case "SetBehavior": var _p6 = _p4._0;
           var behavior = A2($Maybe.withDefault,A5(Behavior,_p6.name,false,false,false,"?"),A2($Dict.get,_p6.name,model.behaviors));
           var updatedBehavior = function () {
              var _p5 = _p6.event;
              switch (_p5)
              {case "started": return _U.update(behavior,{started: true});
                 case "stopped": return _U.update(behavior,{started: false});
                 case "overwhelmed": return _U.update(behavior,{started: true,inhibited: false,overwhelmed: true});
                 case "inhibited": return _U.update(behavior,{started: true,inhibited: true});
                 case "transited": return _U.update(behavior,{started: true,inhibited: false,state: _p6.value});
                 default: return behavior;}
           }();
           return {ctor: "_Tuple2",_0: _U.update(model,{behaviors: A3($Dict.insert,behavior.name,updatedBehavior,model.behaviors)}),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var BehaviorData = F3(function (a,b,c) {    return {name: a,event: b,value: c};});
   var ComportmentModel = function (a) {    return {behaviors: a};};
   var Motive = F3(function (a,b,c) {    return {about: a,on: b,inhibited: c};});
   var motivationView = F2(function (address,model) {
      var inhibitedText = F2(function (bool,about) {    return bool ? A3($Html.node,"s",_U.list([]),_U.list([$Html.text(about)])) : $Html.text(about);});
      var onOffClass = function (bool) {    return bool ? "bg-success" : "bg-danger";};
      var getMotive = F2(function (about,motives) {    return A2($Maybe.withDefault,A3(Motive,"",false,false),A2($Dict.get,about,motives));});
      var isOn = F2(function (about,motives) {    return A2(getMotive,about,motives).on;});
      var isInhibited = F2(function (about,motives) {    return A2(getMotive,about,motives).inhibited;});
      var viewMotive = F3(function (address,motives,about) {
         return A2($Html.tr,
         _U.list([]),
         _U.list([A2($Html.td,
         _U.list([]),
         _U.list([A2($Html.strong,
         _U.list([$Html$Attributes.$class(onOffClass(A2(isOn,about,motives)))]),
         _U.list([A2(inhibitedText,A2(isInhibited,about,motives),about)]))]))]));
      });
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.h2,_U.list([]),_U.list([$Html.text("Motives")]))
              ,A2($Html.table,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "table",_1: true},{ctor: "_Tuple2",_0: "table-bordered",_1: true}]))]),
              _U.list([A2($Html.tbody,_U.list([]),A2($List.map,A2(viewMotive,address,model.motives),$List.sort($Dict.keys(model.motives))))]))]));
   });
   var MotivationModel = function (a) {    return {motives: a};};
   var Percept = F2(function (a,b) {    return {about: a,value: b};});
   var PerceptionModel = function (a) {    return {percepts: a};};
   var StatusModel = F3(function (a,b,c) {    return {paused: a,active: b,runtime: c};});
   var statusInitModel = A3(StatusModel,false,true,{ramFree: -1,ramUsed: -1,swapFree: -1,swapUsed: -1});
   var RuntimeStats = F4(function (a,b,c,d) {    return {ramFree: a,ramUsed: b,swapFree: c,swapUsed: d};});
   var ActiveState = function (a) {    return {active: a};};
   var SetBehavior = function (a) {    return {ctor: "SetBehavior",_0: a};};
   var behaviorInputs = _U.list([A2($Signal.map,SetBehavior,behaviorPort)]);
   var SetMotive = function (a) {    return {ctor: "SetMotive",_0: a};};
   var motivationInputs = _U.list([A2($Signal.map,SetMotive,motivePort)]);
   var AddPercept = function (a) {    return {ctor: "AddPercept",_0: a};};
   var perceptionInputs = _U.list([A2($Signal.map,AddPercept,perceptPort)]);
   var SetRuntimeStats = function (a) {    return {ctor: "SetRuntimeStats",_0: a};};
   var TogglePaused = {ctor: "TogglePaused"};
   var statusView = F2(function (address,model) {
      var src = function (active) {    return active ? "/images/active.png" : "/images/fainted.png";};
      var over = F2(function (value,threshold) {    return _U.cmp(value,threshold) < 0 ? "danger" : "success";});
      var btnColor = function (paused) {    return $Basics.not(paused) ? "btn-success" : "btn-danger";};
      var pausingLabel = function (model) {    return $Basics.not(model.paused) ? "Pause" : "Resume";};
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([A2($Html.div,
      _U.list([$Html$Attributes.$class("row")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("col-md-2")]),
              _U.list([A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,TogglePaused)
                      ,$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "btn",_1: true},{ctor: "_Tuple2",_0: btnColor(model.paused),_1: true}]))]),
              _U.list([$Html.text(pausingLabel(model))]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("col-md-2")]),
              _U.list([A2($Html.img,_U.list([A2($Html$Attributes.attribute,"src",src(model.active))]),_U.list([]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("col-md-8")]),
              _U.list([A2($Html.table,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "table",_1: true},{ctor: "_Tuple2",_0: "table-bordered",_1: true}]))]),
              _U.list([A2($Html.thead,
                      _U.list([]),
                      _U.list([A2($Html.th,_U.list([]),_U.list([$Html.text("RAM free (M)")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text(" RAM used (M)")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text(" Swap free (M)")]))
                              ,A2($Html.th,_U.list([]),_U.list([$Html.text(" Swap used (M)")]))]))
                      ,A2($Html.tbody,
                      _U.list([]),
                      _U.list([A2($Html.tr,
                      _U.list([]),
                      _U.list([A2($Html.td,
                              _U.list([$Html$Attributes.$class(A2(over,model.runtime.ramFree,10))]),
                              _U.list([$Html.text($Basics.toString(model.runtime.ramFree))]))
                              ,A2($Html.td,_U.list([]),_U.list([$Html.text($Basics.toString(model.runtime.ramUsed))]))
                              ,A2($Html.td,
                              _U.list([$Html$Attributes.$class(A2(over,model.runtime.swapFree,10))]),
                              _U.list([$Html.text($Basics.toString(model.runtime.swapFree))]))
                              ,A2($Html.td,_U.list([]),_U.list([$Html.text($Basics.toString(model.runtime.swapUsed))]))]))]))]))]))]))]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container"),A2($Html$Attributes.attribute,"role","main")]),
      _U.list([A2($Html.h1,_U.list([$Html$Attributes.$class("text-center")]),_U.list([$Html.text("Robot Dashboard")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("row")]),
              _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("col-md-12")]),_U.list([A2(statusView,address,model.status)]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("row")]),
              _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("col-md-4")]),_U.list([A2(perceptionView,address,model.perception)]))
                      ,A2($Html.div,_U.list([$Html$Attributes.$class("col-md-3")]),_U.list([A2(motivationView,address,model.motivation)]))
                      ,A2($Html.div,_U.list([$Html$Attributes.$class("col-md-4")]),_U.list([A2(comportmentView,address,model.comportment)]))]))]));
   });
   var SetActive = function (a) {    return {ctor: "SetActive",_0: a};};
   var statusInputs = _U.list([A2($Signal.map,SetRuntimeStats,runtimeStatsPort),A2($Signal.map,SetActive,activeStatePort)]);
   var inputs = $List.concat(_U.list([statusInputs,perceptionInputs,motivationInputs,behaviorInputs]));
   var SetPaused = function (a) {    return {ctor: "SetPaused",_0: a};};
   var fetchPaused = $Effects.task(A2($Task.map,
   SetPaused,
   $Task.toMaybe(A2($Http.get,decodePaused,A2($String$Interpolate.interpolate,"http://{0}:4000/api/robot/paused",_U.list([hostname]))))));
   var statusInitEffect = fetchPaused;
   var init = {ctor: "_Tuple2"
              ,_0: {status: statusInitModel,perception: perceptionInitModel,motivation: motivationInitModel,comportment: comportmentInitModel}
              ,_1: $Effects.batch(_U.list([statusInitEffect,perceptionInitEffect,motivationInitEffect,comportmentInitEffect]))};
   var NoOp = function (a) {    return {ctor: "NoOp",_0: a};};
   var togglePaused = function () {
      var togglePausedEffect = $Effects.task(A2($Task.map,
      NoOp,
      $Task.toMaybe(A3($Http.post,
      $Json$Decode.string,
      A2($String$Interpolate.interpolate,"http://{0}:4000/api/robot/togglePaused",_U.list([hostname])),
      $Http.empty))));
      return $Effects.batch(_U.list([togglePausedEffect,fetchPaused]));
   }();
   var statusUpdate = F2(function (action,model) {
      var _p7 = action;
      switch (_p7.ctor)
      {case "SetPaused": var result = A2($Maybe.withDefault,model.paused,_p7._0);
           return {ctor: "_Tuple2",_0: _U.update(model,{paused: result}),_1: $Effects.none};
         case "SetActive": return {ctor: "_Tuple2",_0: _U.update(model,{active: _p7._0.active}),_1: $Effects.none};
         case "TogglePaused": return {ctor: "_Tuple2",_0: model,_1: togglePaused};
         case "SetRuntimeStats": return {ctor: "_Tuple2",_0: _U.update(model,{runtime: _p7._0}),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var update = F2(function (action,model) {
      var _p8 = A2(comportmentUpdate,action,model.comportment);
      var newComportment = _p8._0;
      var comportmentEffects = _p8._1;
      var _p9 = A2(motivationUpdate,action,model.motivation);
      var newMotivation = _p9._0;
      var motivationEffects = _p9._1;
      var _p10 = A2(perceptionUpdate,action,model.perception);
      var newPerception = _p10._0;
      var perceptionEffects = _p10._1;
      var _p11 = A2(statusUpdate,action,model.status);
      var newStatus = _p11._0;
      var statusEffects = _p11._1;
      return {ctor: "_Tuple2"
             ,_0: _U.update(model,{status: newStatus,perception: newPerception,motivation: newMotivation,comportment: newComportment})
             ,_1: $Effects.batch(_U.list([statusEffects,perceptionEffects,motivationEffects,comportmentEffects]))};
   });
   var app = $StartApp.start({init: init,update: update,view: view,inputs: inputs});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Ev3Dashboard.values = {_op: _op
                                     ,NoOp: NoOp
                                     ,SetPaused: SetPaused
                                     ,SetActive: SetActive
                                     ,TogglePaused: TogglePaused
                                     ,SetRuntimeStats: SetRuntimeStats
                                     ,AddPercept: AddPercept
                                     ,SetMotive: SetMotive
                                     ,SetBehavior: SetBehavior
                                     ,ActiveState: ActiveState
                                     ,RuntimeStats: RuntimeStats
                                     ,StatusModel: StatusModel
                                     ,PerceptionModel: PerceptionModel
                                     ,Percept: Percept
                                     ,MotivationModel: MotivationModel
                                     ,Motive: Motive
                                     ,ComportmentModel: ComportmentModel
                                     ,BehaviorData: BehaviorData
                                     ,Behavior: Behavior
                                     ,Model: Model
                                     ,hostname: hostname
                                     ,app: app
                                     ,main: main
                                     ,init: init
                                     ,statusInitModel: statusInitModel
                                     ,perceptionInitModel: perceptionInitModel
                                     ,motivationInitModel: motivationInitModel
                                     ,comportmentInitModel: comportmentInitModel
                                     ,statusInitEffect: statusInitEffect
                                     ,perceptionInitEffect: perceptionInitEffect
                                     ,motivationInitEffect: motivationInitEffect
                                     ,comportmentInitEffect: comportmentInitEffect
                                     ,view: view
                                     ,statusView: statusView
                                     ,perceptionView: perceptionView
                                     ,motivationView: motivationView
                                     ,comportmentView: comportmentView
                                     ,update: update
                                     ,statusUpdate: statusUpdate
                                     ,perceptionUpdate: perceptionUpdate
                                     ,motivationUpdate: motivationUpdate
                                     ,comportmentUpdate: comportmentUpdate
                                     ,togglePaused: togglePaused
                                     ,fetchPaused: fetchPaused
                                     ,decodePaused: decodePaused
                                     ,inputs: inputs
                                     ,statusInputs: statusInputs
                                     ,perceptionInputs: perceptionInputs
                                     ,motivationInputs: motivationInputs
                                     ,behaviorInputs: behaviorInputs};
};